<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.itheima.dao.IUserDao">
    <!--
        resultMap标签
            配置sql查询结果与实体类的对用关系，使用场景：
            1 实体类属性名与数据库字段不一致
            2 表存在关联关系   一对一,一对多,多对一,多对多

            collection标签
                (一 resultMap) 关联 (多 collection)
                (多 resultMap) 关联 (多 collection)
                select:可实现懒加载

            association标签
                (一 resultMap) 关联 (一 association)
                select:可实现懒加载

            select标签
                id:             对应接口的方法名
                resultType:     结果集类型，如果是类，需要对应全限定名称（包名+类名）
                resultMap:      对应resultMap标签的id属性
                parameterType:  输入参数类型

            <resultMap id="随意起名，习惯xxxMap" type="对用实体类全路径">
                <id property="实体类属性" column="主键"></id>
                <result property="实体类属性" column="其他字段"></result>

                <collection property="resultMap.type关联的属性，通常是集合" ofType="集合中元素的类型，全路径">
                    <id property="实体类属性" column="主键"></id>
                    <result property="实体类属性" column="其他字段"></result>
                </collection>

                <association property="user" column="uid" javaType="com.itheima.domain.User">
                </association>
            </resultMap>

    -->

    <!--****************select****************-->
    <select id="findAll" resultType="com.itheima.domain.User">
        select * from user
    </select>

    <select id="findOne" parameterType="Integer" resultType="com.itheima.domain.User">
        select * from user where id=#{userId}
    </select>

    <select id="findAllByName" parameterType="String" resultType="com.itheima.domain.User">
        select * from user where username like #{username}
     </select>

    <select id="findTotal" resultType="Integer">
        select count(id) from user
    </select>

    <!--这里的user是QueryVo的属性，正常的，获取属性应用get方法，但此处可以.出来，是OGNL写法，将多个实体类包成一个对象，用于查询-->
    <select id="findUserByVo" parameterType="com.itheima.domain.QueryVo" resultType="com.itheima.domain.User">
        select * from user where username like #{user.username}
    </select>

    <!--动态查询，使用<if>-->
    <select id="findUserCondition" parameterType="com.itheima.domain.User" resultType="com.itheima.domain.User">
        select * from user where 1=1
        <if test="username != null">and username =#{username}</if>
        <if test="address != null">and username like #{address}</if>
        <if test="sex != null">and username =#{sex}</if>
        <if test="birthday != null">and username =#{birthday}</if>
    </select>


    <!--
        select * from user where id in ()
        collection:     QueryVo.ids
        open:           where后起始语句
        close:          结束语句
        item:           foreach循环的每个元素
        separator:      用什么分割
    -->
    <select id="findUserInIds" parameterType="com.itheima.domain.QueryVo" resultType="com.itheima.domain.User">
        select * from user
        <where>
            <if test="ids != null and ids.size()>0">
                <foreach collection="ids" open=" and id in (" close=")" item="uid" separator=",">
                    #{uid}
                </foreach>
            </if>
        </where>
    </select>


    <!-- 一user  关联 多account-->
    <resultMap id="userAccountMap" type="com.itheima.domain.User">
        <id property="id" column="id"></id>
        <result property="username" column="username"></result>
        <result property="birthday" column="birthday"></result>
        <result property="sex" column="sex"></result>
        <result property="address" column="address"></result>
        <collection property="accounts" ofType="com.itheima.domain.Account">
            <id property="id" column="aid"></id>
            <result property="uid" column="uid"></result>
            <result property="money" column="money"></result>
        </collection>
    </resultMap>


    <select id="findAllRelevanceAccount" resultMap="userAccountMap">
        select u.*,a.id as aid,a.uid,a.money from user u left join account a on u.id=a.uid
    </select>


    <!-- 多user 关联 多role-->
    <resultMap id="userRoleMap" type="com.itheima.domain.User">
        <id property="id" column="id"></id>
        <result property="username" column="username"></result>
        <result property="birthday" column="birthday"></result>
        <result property="sex" column="sex"></result>
        <result property="address" column="address"></result>
        <collection property="roles" ofType="com.itheima.domain.Role">
            <id property="roleId" column="rid"></id>
            <result property="roleName" column="role_name"></result>
            <result property="roleDesc" column="role_desc"></result>
        </collection>
    </resultMap>

    <select id="findAllUserRole" resultMap="userRoleMap">
        select r.id as rid,r.role_name,r.role_desc,u.* from user u
        left join user_role ur on (u.id=ur.uid)
        left join role r on (ur.rid=r.id)
    </select>
    <!--****************select end****************-->


    <!--****************insert****************-->
    <insert id="saveUser" parameterType="com.itheima.domain.User">
        <!--配置插入操作后，获取插入数据的ID
            keyProperty:    实体类
            keyColumn:      数据库列名
            resultType:     结果集类型
            order:          什么时候执行
        -->
        <selectKey keyProperty="id" keyColumn="id" resultType="int" order="AFTER">
            select last_insert_id();
        </selectKey>
        insert user (username,birthday,sex,address) values (#{username},#{birthday},#{sex},#{address})
    </insert>

    <!--****************update****************-->
    <update id="updateUser" parameterType="com.itheima.domain.User">
        update user set username=#{username},birthday=#{birthday},sex=#{sex},address=#{address} where id=#{id}
    </update>

    <!--****************delete****************-->
    <delete id="deleteUser" parameterType="Integer">
        delete from user where id=#{userId}
    </delete>

</mapper>